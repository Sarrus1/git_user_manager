name: release

on:
  release:
    types: [created]

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            program: cargo
            archive: git_user_manager-${{ github.event.release.tag_name }}-windows-amd64.zip

          - os: windows-latest
            target: i686-pc-windows-msvc
            program: cargo
            archive: git_user_manager-${{ github.event.release.tag_name }}-windows-i686.zip

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            program: cargo
            archive: git_user_manager-${{ github.event.release.tag_name }}-windows-arm64.zip

          - os: macos-latest
            target: x86_64-apple-darwin
            program: cargo
            archive: git_user_manager-${{ github.event.release.tag_name }}-darwin-amd64.tar.gz

          - os: macos-latest
            target: aarch64-apple-darwin
            program: cargo
            archive: git_user_manager-${{ github.event.release.tag_name }}-darwin-arm64.tar.gz

          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            program: cargo
            archive: git_user_manager-${{ github.event.release.tag_name }}-linux-amd64.tar.gz

          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            program: cross
            archive: git_user_manager-${{ github.event.release.tag_name }}-linux-arm64.tar.gz

          - os: ubuntu-20.04
            target: armv7-unknown-linux-gnueabihf
            program: cross
            archive: git_user_manager-${{ github.event.release.tag_name }}-linux-armv7.tar.gz

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross
        if: ${{ matrix.program == 'cross' }}
        run: cargo install cross
      - name: Compile
        run: ${{ matrix.program }} build --target ${{ matrix.target }} --all-features --release --locked
      - name: Compress (Windows)
        if: ${{ contains(matrix.os, 'windows') }}
        run: ${{ format('Compress-Archive target/{0}/release/gum.exe {1}', matrix.target, matrix.archive) }}
      - name: Compress (macOS)
        if: ${{ contains(matrix.os, 'macos') }}
        run: ${{ format('gtar -czvf {1} -C target/{0}/release gum', matrix.target, matrix.archive) }}
      - name: Compress (Linux)
        if: ${{ contains(matrix.os, 'ubuntu') }}
        run: ${{ format('tar -czvf {1} -C target/{0}/release gum', matrix.target, matrix.archive) }}
      - name: Upload binary archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.archive }}

  github:
    name: Publish release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Publish binaries
        run: |
          gh release upload ${{ github.ref_name }} $(find . -iname git_user_manager*.zip)
          gh release upload ${{ github.ref_name }} $(find . -iname git_user_manager*.tar.gz)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  edit-release:
    name: Add release info
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Add changelog
        id: changelog
        uses: mindsers/changelog-reader-action@v2.0.0
      - name: Edit Release
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          id: ${{ github.event.release.id }}
          body: ${{ steps.changelog.outputs.changes }}
          replacebody: true

  cargo:
    name: Release on Cargo
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          args: --allow-dirty

  homebrew:
    name: Release on Homebrew
    runs-on: ubuntu-latest
    needs: [build, github]
    steps:
      - name: Release to Homebrew tap
        uses: Justintime50/homebrew-releaser@v0.14.1
        with:
          homebrew_owner: Sarrus1
          homebrew_tap: homebrew-formulas
          formula_folder: formula
          github_token: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          commit_owner: Sarrus1
          commit_email: 63302440+Sarrus1@users.noreply.github.com
          install: 'bin.install "gum" => "gum"'
          target_darwin_amd64: true
          target_darwin_arm64: true
          target_linux_amd64: true
          target_linux_arm64: true
          update_readme_table: true
          skip_commit: false
          debug: true
